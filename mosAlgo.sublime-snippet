<snippet>
  <content><![CDATA[

/* Abhishek Agrahari */
#include <bits/stdc++.h>
#include <array>
using namespace std;
#define pb push_back
#define nl "\n"
#define all(x) x.begin(), x.end()
#define mp make_pair
#define B begin()
#define E end()
typedef long long ll;
typedef unsigned long long ull;
typedef long double lld;
#define F first
#define S second
#define v1 vector<ll>
#define int ll
#define loop(i,a,b)     for(int i=(a);i<=(b);i++)
#define loopr(i,a,b)     for(int i=(a);i>=(b);i--)
#define setbits(x) __builtin_popcountll(x)
#define nline cout << "\n"
#define sp " "
#define range(a,b) substr(a,b-a+1)
#define pii pair<int,int>
#define vi vector<int>

#ifdef Abhishek
#define deb(x...) cerr << "[" << #x << "] = ["; __print(x)
#define deba2(dp,n,m) for(int i=0;i<=n;i++){for(int j=0;j<=m;j++)cerr<<dp[i][j]<<" ";cerr<<"\n";}
#else
#define deb(x...)
#define deba2(dp,n,m)
#endif

#define inf 1000000000000000000 //1e18
#define INF 1000000000 //1e9
const double delta = 0.0000000001;
const double pi = 3.1415926535;
ll MOD = 1000000007;
#define fastio() ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)
// 1) x & (x - 1):sets the last one bit of x to zero
// power of two exactly when x & (x âˆ’ 1) = 0.
// 2)x & -x:sets all the one bits to zero, except last one bit
// 3)x | (x - 1):inverts all the bits after the last one bit
//clear adj and visited vector declared globally after each test case
//Mod wale question mein last mein if dalo ie. ans<0 then ans+=mod;
//Incase of close mle change language to c++17 or c++14
void _print(int t) {cerr << t;}
void _print(string t) {cerr << t;}
void _print(char t) {cerr << t;}
void _print(lld t) {cerr << t;}
void _print(double t) {cerr << t;}
void _print(ull t) {cerr << t;}
template <class T, class V> void _print(pair <T, V> p);
template <class T> void _print(vector <T> v);
template <class T> void _print(set <T> v);
template <class T, class V> void _print(map <T, V> v);
template <class T> void _print(multiset <T> v);
template <class T, class V> void _print(pair <T, V> p) {cerr << "{"; _print(p.F); cerr << ","; _print(p.S); cerr << "}";}
template <class T> void _print(vector <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(set <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(multiset <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T, class V> void _print(map <T, V> v) {cerr << "[ "; for (auto i : v) {_print(i); cerr << " ";} cerr << "]";}
void __print() {cerr << "]\n";}
template <typename T, typename... V> void __print(T t, V... v) {_print(t); if (sizeof...(v)) cerr << ", "; __print(v...);}
//*****************************************
ll expo(ll a, ll b, ll mod) {ll res = 1; while (b > 0) {if (b & 1)res = (res * a) % mod; a = (a * a) % mod; b = b >> 1;} return res;}
ll gcd(ll a, ll b) { if (b == 0) return a; return gcd(b, a % b);}
ll lcm(ll a, ll b) { ll x = gcd(a, b); ll ans = (a * b) / x; return ans; }
int extendedGCD(int a, int b, int &x, int &y) {if (b == 0) {x = 1; y = 0; return a;} int x1, y1; int d = extendedGCD(b, a % b, x1, y1); x = y1; y = x1 - (a / b) * y1; return d;}
void swap(ll &x, ll &y) {ll temp = x; x = y; y = temp;}
ll modInverse(ll n, ll t) { return expo(n, t - 2, t);}
void factors(ll n) {v1 factor; for (ll i = 1; i * i <= n; i++) if (n % i == 0) { if (n / i == i) factor.pb(i); else {factor.pb(i); factor.pb(n / i);}}}
ll mod_sub(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a - b) % m) + m) % m;}
ull nCrModPFermat(ll n, ll r) {if (n < r) return 0; if (r == 0) return 1; vector<ull> fac(n + 1); fac[0] = 1; for (ll i = 1; i <= n; i++) fac[i] = (fac[i - 1] * i) % MOD; return (fac[n] * modInverse(fac[r], MOD) % MOD * modInverse(fac[n - r], MOD) % MOD) % MOD;}
//**********************************************************CODE STARTS **************************************************************
//Question - https://codeforces.com/problemset/problem/221/D
//Time complexity of mo's algorithm is O((N + Q)*root(N))
struct query {
    int l, r, i, bno;
};

bool cmp(query &a, query &b) {
    //if block no is same
    if (a.bno == b.bno) {

        //both are in an odd block - go top ot bottom
        if (a.bno & 1) {
            return a.r > b.r;
        } else {
        //even block - go bottom - top
            return a.r < b.r;
        }
    } else {
        //sort with increasing block no.
        return a.bno < b.bno;
    }
}

int freq[100005];
int n;
int tot = 0;

void add(int x) {
    if (x > n) return;
    if (freq[x] == x)tot--;
    freq[x]++;
    if (freq[x] == x)tot++;
}

void remove(int x) {
    if (x > n) return;
    if (freq[x] == x) tot--;
    freq[x]--;
    if (freq[x] == x) tot++;
}

void solve()
{
    int q;
    cin >> n >> q;
    int a[n];
    for (int i = 0; i < n; i++) {
        cin >> a[i];
    }

    int b = sqrt(n);

    vector<query> qry(q);
    for (int i = 0; i < q; i++) {
        cin >> qry[i].l >> qry[i].r;
        qry[i].l--;
        qry[i].r--;
        qry[i].i = i;
        qry[i].bno = qry[i].l / b;
        //think like plotting query in an 2D plane where x-axis is L and y-axis is R
    }

    //sort the queries
    sort(qry.begin(), qry.end(), cmp);

    //initialise
    int l = 0, r = 0;
    add(a[0]);

    int ans[q];
    for (int i = 0; i < q; i++) {
        int currL = qry[i].l;
        int currR = qry[i].r;
        while (currL < l) {
            l--;
            add(a[l]);
        }
        while (currR > r) {
            r++;
            add(a[r]);
        }
        while (currL > l) {
            remove(a[l]);
            l++;
        }
        while (currR < r) {
            remove(a[r]);
            r--;
        }
        ans[qry[i].i] = tot;
    }

    for (int i = 0; i < q; i++) {
        cout << ans[i] << endl;
    }
}


signed main() {
#ifdef Abhishek
    freopen("Error.txt", "w", stderr);
#endif
    fastio();
    int t = 1;
    // cin >> t;
    while (t--) {
        solve();
    }
    return 0;
}




]]></content>
  <tabTrigger>mosalgo</tabTrigger>
  <description>question</description>
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
  <scope >source.c++</scope >
</snippet>