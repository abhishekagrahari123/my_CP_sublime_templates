<snippet>
  <content><![CDATA[

//first three parameter to build,sum,update function would be 1,0,n-1
//segtree is 1-based, while original array is 0-based
//update and sum function accepts index in 0-based
struct node {
	int val = 0;
};

const int MAXN = 200005;
int n, a[MAXN];
node t[4 * MAXN];

void merge(node& parent, node& left, node& right) {
	parent.val = left.val + right.val;
}

void build(int v, int tl, int tr) {
	if (tl == tr) {
		t[v].val = a[tl];
	}
	else {
		int tm = (tl + tr) / 2;
		build(v * 2, tl, tm);
		build(v * 2 + 1, tm + 1, tr);
		merge(t[v], t[v * 2], t[v * 2 + 1]);
	}
}

node qry(int v, int tl, int tr, int l, int r) {
	if (l > r) {
		node x; return x;
	}
	if (l == tl and r == tr) return t[v];
	int tm = (tl + tr) / 2;
	node left = qry(v * 2, tl, tm, l, min(r, tm));
	node right = qry(v * 2 + 1, tm + 1, tr, max(l, tm + 1), r);
	node x;
	merge(x, left, right);
	return x;
}

void update(int v, int tl, int tr, int pos, int new_val) {
	if (tl == tr) {
		t[v].val = new_val;
	} else {
		int tm = (tl + tr) / 2;
		if (pos <= tm)
			update(v * 2, tl, tm, pos, new_val);
		else
			update(v * 2 + 1, tm + 1, tr, pos, new_val);
		merge(t[v], t[2 * v], t[2 * v + 1]);
	}
}


]]></content>
  <tabTrigger>seg</tabTrigger>
  <description>Segment Tree</description>
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
 <scope >source.c++</scope >
</snippet>
